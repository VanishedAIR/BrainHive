// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  username          String   @unique
  clerkId           String   @unique
  name              String?
  bio               String?
  image             String?
  location          String?
  website           String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  posts             Post[]  
  likes             Like[]
  studyGroups       StudyGroup[]  
  meetings          Meeting?
  credentials       Credentials?
}

model Post {
  id        String   @id @default(cuid())
  authorId  String
  content   String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  likes     Like[]
}

model Like {
  id        String   @id @default(cuid())
  postId    String                 
  userId    String                 
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId, postId]) 
  @@unique([userId, postId]) 
}

model StudyGroup {
  id          Int      @id @default(autoincrement())
  groupName   String
  subject     Int
  rules       String
  ownerId     String
  members     String  
  status      String
  createdAt   DateTime @default(now())

  // Relations
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model Meeting {
  id        Int      @id @default(autoincrement())
  userId    String @unique
  meetingID Int
  year      Int
  month     Int
  day       Int
  time      Int
  location  String
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Credentials {
  id         Int      @id @default(autoincrement())
  userId     String   @unique
  username   String   @unique
  password   String
  email      String   @unique
  resetCode  Int      @default(0)

  // Relations
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
